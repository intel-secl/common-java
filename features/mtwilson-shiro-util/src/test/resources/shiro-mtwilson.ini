# shiro configuration
# Reference: https://shiro.apache.org/authentication.html

[main]
# setting ssl.enabled to false disables the "ssl required" filter
ssl.enabled = false
ssl.port = 8443

jdbcDataSource=com.intel.mtwilson.shiro.jdbi.JdbcDataSource

jdbcPasswordRealm=com.intel.mtwilson.shiro.jdbi.JdbcPasswordRealm
passwordMatcher=com.intel.mtwilson.shiro.authc.password.PasswordCredentialsMatcher
jdbcPasswordRealm.credentialsMatcher=$passwordMatcher

jdbcCertificateRealm=com.intel.mtwilson.shiro.jdbi.JdbcCertificateRealm
certificateMatcher=com.intel.mtwilson.shiro.authc.x509.X509CredentialsMatcher
jdbcCertificateRealm.credentialsMatcher=$certificateMatcher

#hmac_realm = com.intel.mtwilson.shiro.HmacRealm

securityManager.realms = $jdbcCertificateRealm, $jdbcPasswordRealm

# optional: custom authentication strategy
# authenticator = com.foo.bar.CustomAuthenticator
# securityManager.authenticator = $authenticator

# built-in authentication strategy
#authcStrategy = org.apache.shiro.authc.pam.FirstSuccessfulStrategy
#authcStrategy = org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy
authcStrategy = com.intel.mtwilson.shiro.LoggingAtLeastOneSuccessfulStrategy
securityManager.authenticator.authenticationStrategy = $authcStrategy

#logout.redirectUrl = /static/login.html
#shiro.loginUrl = /static/login.html
#authc.successUrl = /static/index.html

# Reference: http://shiro.apache.org/static/1.2.2/apidocs/org/apache/shiro/web/filter/authc/BasicHttpAuthenticationFilter.html
# note lowercase to handle jersey client filter .... uhg... need case insensitive??? or just to define two of these filters ???
authcPassword=com.intel.mtwilson.shiro.authc.password.HttpBasicAuthenticationFilter
authcPassword.applicationName=Mt Wilson
authcPassword.authcScheme=Basic
authcPassword.authzScheme=Basic

authcX509=com.intel.mtwilson.shiro.authc.x509.X509AuthenticationFilter
authcX509.applicationName=Mt Wilson
authcX509.authcScheme=X509

# custom encrypted token authentication scheme for the portal
#tokenFactory=com.intel.dcsg.cpg.authz.token.TokenFactory
#tokenValidator=com.intel.dcsg.cpg.authz.token.TokenValidator
#tokenValidator.protection = $tokenFactory.protection
#tokenValidator.protectionPolicy = $tokenFactory.protectionPolicy
#tokenValidator.encryptionKeySource = $tokenFactory.encryptionKeySource
#tokenValidator.codec = $tokenFactory.codec
#tokenValidator.expiresAfter = 1800
authcToken=com.intel.mtwilson.shiro.EncryptedTokenAuthenticationFilter
#authcToken.tokenFactory = $tokenFactory
#authcToken.tokenValidator = $tokenValidator

hostFilter=com.intel.mtwilson.shiro.authz.HostFilter
hostFilter.allow=127.0.0.1
#hostFilter.unauthorizedUrl=/static/index.html

# define security by url matching, the first match wins so order is important
# also /path/*  will match /path/a and /path/b but not /path/c/d 
# but /path/**  will match /path/a and /path/b and also /path/c/d
# /v2/login is a real resource in mtwilson-shiro-ws-v2 but /v2/logout is a
# virtual resource handled by shiro's logout filter
[urls]
/v2/test/error/** = hostFilter
/v2/login = anon
/v2/logout = logout
/v1/** = ssl, authcX509, authcPassword, authcToken, perms
/v2/** = ssl, authcX509, authcPassword, authcToken, perms
/static/** = anon
# /v2/login =authc (special resource for form-based login that takes the post params as body??? )

# Reference: http://shiro.apache.org/webapp-tutorial.html
#/static/login.html = authc
#/static/logout.html = logout
